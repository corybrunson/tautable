sapply((i + 1):length(vec), function(j) vec[i] > vec[j])
})))
}
p.ran <- sapply(k.ran, function(k) Kendall(x = 1:n, y = inv.vec(n, k))$sl)
p.ran
Kendall(x=1:n,y=inv.vec(n,floor(k.ran[2]/2)))$sl
Kendall(x=1:n,y=inv.vec(n,floor(k.ran[2])))$sl
?Kendall
p.ran <- sapply(k.ran, function(k) Kendall(x = 1:n, y = inv.vec(n, k))$sl / 2)
p.ran
diff(p.ran)
if(p <= p.ran[1] | p >= p.ran[2]) break
n <- 30; p <- .01
if(p <= p.ran[1] | p >= p.ran[2]) break
q <- (p - p.ran[1]) / diff(p.ran)
q
round(pi)
k <- round(q * diff(k.ran) + k.ran[1])
k
if(k == k.ran[1]) k <- k + 1 else if(k == k.ran[2]) k <- k - 1
k
p <- Kendall(x = 1:n, y = inv.vec(n, k))$sl / 2
p
n <- 30; p <- .01
n <- 30; p <- .01
# range of revelant k (at most half of all possible discordant pairs)
k.ran <- c(0, floor(choose(n, 2) / 2))
# corresponding one-sided p-values
p.ran <- sapply(k.ran, function(k) Kendall(x = 1:n, y = inv.vec(n, k))$sl / 2)
# interpolate
repeat {
if(p <= p.ran[1]) {
k <- NA; break
}
if(p > p.ran[2]) {
k <- k.ran[2]; break
}
q <- (p - p.ran[1]) / diff(p.ran)
k <- round(q * diff(k.ran) + k.ran[1])
if(k == k.ran[1]) k <- k + 1 else if(k == k.ran[2]) k <- k - 1
k.p <- Kendall(x = 1:n, y = inv.vec(n, k))$sl / 2
if(k.p == p) break else if(k.p < p) {
k.ran[1] <- k; p.ran[1] <- k.p
} else if(k.p > p) {
k.ran[2] <- k; p.ran[2] <- k.p
}
if(diff(k.ran) < 2) {
k <- k.ran[1]; break
}
}
k
tau  <- (choose(n, 2) - 2 * k) / choose(n, 2)
print(paste('tau must beat', tau))
print(paste('tau must beat', round(tau, 3)))
?cor.test
n <- 30; p <- .01
# range of revelant k (at most half of all possible discordant pairs)
k.ran <- c(0, floor(choose(n, 2) / 2))
# corresponding one-sided p-values
p.ran <- sapply(k.ran, function(k) cor.test(x = 1:n, y = inv.vec(n, k),
alternative = 't',
method = 'kendall')$p.value / 2)
k.ran
p.ran
repeat {
if(p <= p.ran[1]) {
k <- NA; break
}
if(p > p.ran[2]) {
k <- k.ran[2]; break
}
q <- (p - p.ran[1]) / diff(p.ran)
k <- round(q * diff(k.ran) + k.ran[1])
if(k == k.ran[1]) k <- k + 1 else if(k == k.ran[2]) k <- k - 1
k.p <- cor.test(x = 1:n, y = inv.vec(n, k),
alternative = 't', method = 'kendall')$p.value / 2
if(k.p == p) break else if(k.p < p) {
k.ran[1] <- k; p.ran[1] <- k.p
} else if(k.p > p) {
k.ran[2] <- k; p.ran[2] <- k.p
}
if(diff(k.ran) < 2) {
k <- k.ran[1]; break
}
}
tau.s  <- (choose(n, 2) - 2 * k) / choose(n, 2)
print(paste('tau must beat', round(tau.s, 3)))
require(Kendall)
x=1:5
y=c(1,3,4,5,2)
test <- cor.test(x=x,y=y,alternative='t',method='kendall')
wh.tau.p <- sapply(c(tau.part, p.part), function(part) {
which(names(test) == part)
})
tau.part ='estimate'
p.part='p.value'
wh.tau.p <- sapply(c(tau.part, p.part), function(part) {
which(names(test) == part)
})
wh.tau.p
test[wh.tau.p]
unname(test[wh.tau.p])
unname(unlist(test)[wh.tau.p])
unlist(unname(test[wh.tau.p]))
test<-Kendall(x=x,y=y)
tau.part='tau'
p.part='sl'
wh.tau.p <- sapply(c(tau.part, p.part), function(part) {
which(names(test) == part)
})
wh.tau.p
unlist(unname(test[wh.tau.p]))
library(microbenchmark)
r <- getOption("repos")
r["CRAN"] <- "http://my.local.cran"
options(repos = r)
pkgs <- c('stats', 'Kendall')
for(pkg in pkgs) {
if(!require(pkg, character.only = TRUE)) {
install.packages(pkg)
if(!require(pkg, character.only = TRUE))
warning(paste('package', pkg, 'is not available'))
}
}
# Count inversions in a vector
vec.inv <- function(vec) {
sum(unlist(sapply(1:(length(vec) - 1), function(i) {
sapply((i + 1):length(vec), function(j) vec[i] > vec[j])
})))
}
# Generate a permutation of 1:n having a given number k of inversions
inv.vec <- function(n, k, bw.ok = TRUE) {
if(k > choose(n, 2) | k < 0 | any(c(n, k) %% 1 != 0)) stop('invalid n or k')
backwards <- (k > choose(n, 2) / 2) & bw.ok
if(backwards) k <- choose(n, 2) - k
vec <- 1:n; ninv <- 0
while(ninv < k) {
i <- vec[1]
j <- if(k - ninv < n - i) (2 + k - ninv):n else {
if(i == 1) c() else (2 + n - i):n
}
vec <- c(vec[-c(1, j)], i, vec[j])
ninv <- ninv + {
if(k - ninv < n - i) (k - ninv) else (n - i)
}
stopifnot(ninv == vec.inv(vec))
}
if(backwards) vec <- rev(vec)
return(vec)
}
n <- 30; p <- .01
# range of revelant k (at most half of all possible discordant pairs)
k.ran <- c(0, floor(choose(n, 2) / 2))
# corresponding one-sided p-values
p.ran <- sapply(k.ran, function(k) Kendall(x = 1:n, y = inv.vec(n, k))$sl / 2)
# interpolate (linearly)
repeat {
if(p <= p.ran[1]) {
k <- NA; break
}
if(p > p.ran[2]) {
k <- k.ran[2]; break
}
q <- (p - p.ran[1]) / diff(p.ran)
k <- round(q * diff(k.ran) + k.ran[1])
if(k == k.ran[1]) k <- k + 1 else if(k == k.ran[2]) k <- k - 1
k.p <- Kendall(x = 1:n, y = inv.vec(n, k))$sl / 2
if(k.p == p) break else if(k.p < p) {
k.ran[1] <- k; p.ran[1] <- k.p
} else if(k.p > p) {
k.ran[2] <- k; p.ran[2] <- k.p
}
if(diff(k.ran) < 2) {
k <- k.ran[1]; break
}
}
tau.K  <- round((choose(n, 2) - 2 * k) / choose(n, 2), 4)
print(paste('need tau >', tau.K))
n <- 30; p <- .01
# range of revelant k (at most half of all possible discordant pairs)
k.ran <- c(0, floor(choose(n, 2) / 2))
# corresponding one-sided p-values
p.ran <- sapply(k.ran, function(k) cor.test(x = 1:n, y = inv.vec(n, k),
alternative = 't',
method = 'kendall')$p.value / 2)
# interpolate (linearly)
repeat {
if(p <= p.ran[1]) {
k <- NA; break
}
if(p > p.ran[2]) {
k <- k.ran[2]; break
}
q <- (p - p.ran[1]) / diff(p.ran)
k <- round(q * diff(k.ran) + k.ran[1])
if(k == k.ran[1]) k <- k + 1 else if(k == k.ran[2]) k <- k - 1
k.p <- cor.test(x = 1:n, y = inv.vec(n, k),
alternative = 't', method = 'kendall')$p.value / 2
if(k.p == p) break else if(k.p < p) {
k.ran[1] <- k; p.ran[1] <- k.p
} else if(k.p > p) {
k.ran[2] <- k; p.ran[2] <- k.p
}
if(diff(k.ran) < 2) {
k <- k.ran[1]; break
}
}
tau.s  <- round((choose(n, 2) - 2 * k) / choose(n, 2), 4)
# Compute the Mahonian numbers
mahonians.recursive <- function(n) {
if(n <= 0 | n%%1 != 0) stop('n must be a positive integer')
if(n == 1) 1 else rowSums(sapply(0:(n - 1), function(i) {
c(rep(0, i), mahonians.recursive(n - 1), rep(0, n - 1 - i))
}))
}
print(paste('Example: the Mahonian numbers for n = 5 are',
toString(mahonians.recursive(5))))
# Rapid table of critical values (n a vector, alpha a vector)
tau.crit.table <- function (n, alpha, incl.len = TRUE, stat = "tau") {
if (any(n <= 0 | n%%1 != 0))
stop("n must be a positive integer")
if (any(alpha > 0.5 | alpha <= 0))
stop("alpha must be positive and below .5")
vec <- 1
m <- 1
max.n <- max(n)
mat <- matrix(NA, nr = if (min(n) == 1)
1
else 0, nc = length(alpha))
while (max.n > m) {
vec <- rowSums(sapply(0:m, function(i) {
c(rep(0, i), vec, rep(0, m - i))
}))
m <- m + 1
if (m %in% n) {
s <- cumsum(vec[1:floor(choose(m, 2)/2)])/sum(vec)
i <- sapply(alpha, function(a) if (s[1] < a)
max(which(s < a)) - 1
else NA)
mat <- rbind(mat, i)
}
}
stopifnot(length(vec) == choose(max.n, 2) + 1)
colnames(mat) <- alpha
rownames(mat) <- n
if (stat == "tau") {
mat <- (choose(n, 2) - 2 * mat)/choose(n, 2)
}
else if (stat == "P" | grepl("^concord", stat, ignore.case = TRUE)) {
mat <- choose(n, 2) - mat
}
else if (stat == "S") {
mat <- choose(n, 2) - 2 * mat
}
else if (!(stat %in% c("K", "k", "Q")) & !grepl("^discord|^inv",
stat, ignore.case = TRUE)) {
stop("unknown statistic")
}
if (incl.len)
mat <- cbind(n = n, mat)
return(mat)
}
# Ranges of n and of alpha
example.n <- seq(10, 100, 10); example.alpha <- 10 ^ (-1:-4)
# Critical value table for k
inv.crit.vals <- tau.crit.table(n = example.n,
alpha = example.alpha,
incl.len = TRUE, stat = 'inv')
print(inv.crit.vals)
# Critical value table for tau
tau.crit.vals <- tau.crit.table(n = example.n,
alpha = example.alpha,
incl.len = TRUE)
print(tau.crit.vals)
N <- seq(25, 200, 25)
library(microbenchmark)
microbenchmark(list(1+1,1+2),times=10000L)
microbenchmark(list=list(1+1,1+2),times=10000L)
microbenchmark(list=list(a=1+1,b=1+2),times=10000L)
N <- seq(25, 50, 25)
mbm <- microbenchmark(
list = lapply(N, tau.crit.table, alpha = 10^(-1:-3), incl.len = TRUE),
check = function(x, y) all(x == y),
times = 10L, control = list(warmup = 1)
)
identical(rep(1,3))
identical(1,1)
identical(matrix(1,nr=2,nc=2),matrix(rep(1,4),nr=2))
mbm <- microbenchmark(
list = lapply(N, tau.crit.table, alpha = 10^(-1:-3), incl.len = TRUE),
check = identical,
times = 10L, control = list(warmup = 1)
)
mbm <- microbenchmark(
list = lapply(N, tau.crit.table, alpha = 10^(-1:-3), incl.len = TRUE),
times = 10L, control = list(warmup = 1)
)
N
microbenchmark(list=list('1+1','1+2'),times=10000L)
microbenchmark(list=list(a='1+1',b='1+2'),times=10000L)
microbenchmark(list=list(a='rep(1^2,1000',b='rep(1,1000)^2'),times=10000L)
microbenchmark(list=list(a='rep(1^2,1000)',b='rep(1,1000)^2'),times=10000L)
lapply(N, function(n) paste('tau.crit.table(n=', n,
'alpha=10^(-1:-3), incl.len=TRUE)'))
lapply(N, function(n) paste0('tau.crit.table(n=', n,
',a lpha=10^(-1:-3), incl.len=TRUE)'))
mbm <- microbenchmark(
list = lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)')),
times = 10L, control = list(warmup = 1)
)
mbm <- microbenchmark(
list = lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)')),
times = 1000L, control = list(warmup = 1)
)
mbm <- microbenchmark(
list = lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)')),
times = 10L
)
mxm
mb
mbm
evals
N <- seq(25, 50, 25)
library(microbenchmark)
evals <- lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)'))
names(evals) <- N
mbm <- microbenchmark(list = evals, times = 10L)
mbm
N <- seq(25, 100, 25)
library(microbenchmark)
evals <- lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)'))
names(evals) <- N
mbm <- microbenchmark(list = evals, times = 10L)
mbm
N <- seq(25, 100, 25)
library(microbenchmark)
evals <- lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)'))
names(evals) <- N
microbenchmark(list = evals, times = 10L)
N <- seq(25, 100, 25)
library(microbenchmark)
evals <- lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)'))
names(evals) <- N
mbm <- microbenchmark(list = evals, times = 10L)
mbm
N <- seq(25, 150, 25)
library(microbenchmark)
evals <- lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)'))
names(evals) <- N
mbm <- microbenchmark(list = evals, times = 10L)
mbm
N <- seq(25, 200, 25)
library(microbenchmark)
evals <- lapply(N, function(n) paste0('tau.crit.table(n=', n,
', alpha=10^(-1:-3), incl.len=TRUE)'))
names(evals) <- N
mbm <- microbenchmark(list = evals, times = 10L)
mbm
evals
tau.crit.table(n=25, alpha=10^(-1:-3), incl.len=TRUE)
tau.crit.table(n=50, alpha=10^(-1:-3), incl.len=TRUE)
?tau.crit.table
tau.crit.table
tau.crit.table(n=1:10, alpha=10^(-1:-3), incl.len=TRUE)
tau.crit.table(n=100, alpha=10^(-1:-3), incl.len=TRUE)
tau.crit.table(n=150, alpha=10^(-1:-3), incl.len=TRUE)
ns <- seq(25, 100, 25)
ns <- seq(25, 100, 25)
fs <- lapply(ns, function(n) {
function(alpha, incl.len = TRUE)
tau.crit.table(n = n, alpha = alpha, incl.len = incl.len)
})
tau.crit.table
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
tau.crit.table(125, alpha = 10^(-1:-3)),
tau.crit.table(150, alpha = 10^(-1:-3)),
tau.crit.table(175, alpha = 10^(-1:-3)),
tau.crit.table(200, alpha = 10^(-1:-3)),
times = 100L
)
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
tau.crit.table(125, alpha = 10^(-1:-3)),
tau.crit.table(150, alpha = 10^(-1:-3)),
#tau.crit.table(175, alpha = 10^(-1:-3)),
#tau.crit.table(200, alpha = 10^(-1:-3)),
times = 10L
)
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
#tau.crit.table(75, alpha = 10^(-1:-3)),
#tau.crit.table(100, alpha = 10^(-1:-3)),
#tau.crit.table(125, alpha = 10^(-1:-3)),
#tau.crit.table(150, alpha = 10^(-1:-3)),
#tau.crit.table(175, alpha = 10^(-1:-3)),
#tau.crit.table(200, alpha = 10^(-1:-3)),
times = 10L
)
mbm
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
#tau.crit.table(100, alpha = 10^(-1:-3)),
#tau.crit.table(125, alpha = 10^(-1:-3)),
#tau.crit.table(150, alpha = 10^(-1:-3)),
#tau.crit.table(175, alpha = 10^(-1:-3)),
#tau.crit.table(200, alpha = 10^(-1:-3)),
times = 10L
)
mbm
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
#tau.crit.table(125, alpha = 10^(-1:-3)),
#tau.crit.table(150, alpha = 10^(-1:-3)),
#tau.crit.table(175, alpha = 10^(-1:-3)),
#tau.crit.table(200, alpha = 10^(-1:-3)),
times = 10L
)
mbm
autoplot.microbenchmark(mbm)
autoplot.microbenchmark(mbm)
??microbenchmark
autoplot(mbm)
library(ggplot2)
autoplot(mbm)
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
#tau.crit.table(125, alpha = 10^(-1:-3)),
#tau.crit.table(150, alpha = 10^(-1:-3)),
#tau.crit.table(175, alpha = 10^(-1:-3)),
#tau.crit.table(200, alpha = 10^(-1:-3)),
times = 10L
)
autoplot(mbm)
?autoplot
boxplot(mbm)
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
#tau.crit.table(125, alpha = 10^(-1:-3)),
#tau.crit.table(150, alpha = 10^(-1:-3)),
#tau.crit.table(175, alpha = 10^(-1:-3)),
#tau.crit.table(200, alpha = 10^(-1:-3)),
times = 1L
)
autoplot(mbm)
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(25, alpha = 10^(-1:-3)),
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(75, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
tau.crit.table(125, alpha = 10^(-1:-3)),
tau.crit.table(150, alpha = 10^(-1:-3)),
tau.crit.table(175, alpha = 10^(-1:-3)),
tau.crit.table(200, alpha = 10^(-1:-3)),
times = 1L
)
autoplot(mbm)
library(microbenchmark)
mbm <- microbenchmark(
tau.crit.table(50, alpha = 10^(-1:-3)),
tau.crit.table(100, alpha = 10^(-1:-3)),
tau.crit.table(150, alpha = 10^(-1:-3)),
tau.crit.table(200, alpha = 10^(-1:-3)),
times = 2L
)
autoplot(mbm)
library(tautable)
tau.crit.table
library(ggplot2)
library(microbenchmark)
mbm <- microbenchmark(
'50' = tau.crit.table(50, alpha = 10^(-1:-3)),
'100' = tau.crit.table(100, alpha = 10^(-1:-3)),
'150' = tau.crit.table(150, alpha = 10^(-1:-3)),
'200' = tau.crit.table(200, alpha = 10^(-1:-3)),
times = 2L
)
autoplot(mbm)
